{"ts":1367166215179,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// This is a sample application which you can use as a starting point for your\r\n// project. The only parts you should *need* to change are indicated with `TODO`\r\n// below. However, you are welcome to change more if you wish.\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nvar USER_OR_GROUP_NAME = 'lauraxjin'; // TODO: Insert GitHub username or group name.\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nif (! USER_OR_GROUP_NAME) { \r\n  throw new Error(\r\n    'You must set your GitHub username or group name in the app.js file'); \r\n}\r\n\r\n// Import some utility functions.\r\nvar utils = require('./utils');\r\n\r\n// Create a new web application.\r\nvar app = utils.initializeWebApp();\r\n\r\n// Connect to your database.\r\nvar db = utils.connectToDatabase(USER_OR_GROUP_NAME);\r\n\r\n// TODO: Start defining your resource handlers. You may just need to modify the\r\n// examples below, or you may need to add additional handlers by copying,\r\n// pasting, and modifying these examples.\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// Example of handling PUT to create or update a resource. /////////////////////\r\n// Here we create or update an item using the ID specified in the URI. /////////\r\n////////////////////////////////////////////////////////////////////////////////\r\napp.put('/chapters/:id',      // TODO: change to suit your URI design.\r\n  function(req, res) {\r\n  \r\n    // Get the item ID from the URI.\r\n    var item_id = req.params.id;\r\n\r\n    // Get the item info that was PUT from the input form.\r\n    // See the form in `views/list-parties.ejs`.\r\n    var item = req.body.item;\r\n    \r\n    item.type = 'chapter'; // TODO: change to the type of item you want\r\n\r\n    // Save the new item to the database, specifying the ID.\r\n    db.save(item_id, item, function(err) {\r\n\r\n      // If there was a database error, return an error status.\r\n      if (err) { res.send(err, 500); } \r\n      \r\n      // Otherwise, redirect back to the URI from which the form was submitted.\r\n      else { res.redirect('back' ); }\r\n    });\r\n  }\r\n);\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// Example of handling GET of a \"collection\" resource. /////////////////////////\r\n// Here we list all items of type `party`. /////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////\r\napp.get('/chapters/',         // TODO: change to suit your URI design. \r\n  function(req, res) {\r\n\r\n    var item_type = 'chapter'; // TODO: change to the type of item you want.\r\n\r\n    // Get all items of the specified type from the database.\r\n    db.getAll(item_type, function(err, items) {\r\n\r\n      // If there was a database error, return an error status.\r\n      if (err) { res.send(err, 500); } \r\n\r\n      // Otherwise, use the returned data to render an HTML page.\r\n      else {\r\n        res.render(\r\n          'list-chapters',   // TODO: change to the name of your HTML template.\r\n          { items: items }\r\n        );\r\n      }\r\n    });\r\n  }\r\n);\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// Example of handling POST to create a resource. //////////////////////////////\r\n// Here we create an item and allow the ID to be created automatically. ////////\r\n////////////////////////////////////////////////////////////////////////////////\r\napp.post('/rule-names/', // TODO: change to suit your URI design.\r\n  function(req, res) {\r\n  \r\n    // Get the item info that was POSTed from the input form.\r\n    // See the form in `views/one-party.ejs`.\r\n    var item = req.body.item;\r\n\r\n    item.type = 'rule-name'; // TODO: change to the type of item you want\r\n\r\n    // Save the new item to the database. (No ID specified, it will be created.)\r\n    db.save(item, function(err) {\r\n\r\n      // If there was a database error, return an error status.\r\n      if (err) { res.send(err, 500); } \r\n      \r\n      // Otherwise, redirect back to the URI from which the form was submitted.\r\n      else { res.redirect('back' ); }\r\n    });\r\n  }\r\n);\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// Another example of handling PUT to update a resource. ///////////////////////\r\n// Here we update an item using the ID specified in the URI. ///////////////////\r\n////////////////////////////////////////////////////////////////////////////////\r\napp.put('/rule-names/:id', // TODO: change to suit your URI design.\r\n  function(req, res) {\r\n  \r\n    // Get the item ID from the URI.\r\n    var item_id = req.params.id;\r\n\r\n    // Get the item info that was PUT from the input form.\r\n    // See the form in `views/one-candidate.ejs`.\r\n    var item = req.body.item;\r\n\r\n    item.type = 'rule'; // TODO: change to the type of item you want\r\n\r\n    // Save the new item to the database, specifying the ID.\r\n    db.save(item_id, item, function(err) {\r\n\r\n      // If there was a database error, return an error status.\r\n      if (err) { res.send(err, 500); } \r\n      \r\n      // Otherwise, redirect back to the URI from which the form was submitted.\r\n      else { res.redirect('back' ); }\r\n    });\r\n  }\r\n);\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// Another example of handling GET of a \"collection\" resource. /////////////////\r\n// This time we support filtering the list by some criteria (i.e. searching). //\r\n////////////////////////////////////////////////////////////////////////////////\r\napp.get('/rule-names/',          // TODO: change to suit your URI design. \r\n  function(req, res) {\r\n\r\n    var item_type = 'rule-name'; // TODO: change to the type of item you want.\r\n\r\n    // Get items of the specified type that match the query.\r\n    db.getSome(item_type, req.query, function(err, items) {\r\n\r\n      // If there was a database error, return an error status.\r\n      if (err) { res.send(err, 500); } \r\n\r\n      // Otherwise, use the returned data to render an HTML page.\r\n      else {\r\n        res.render(\r\n          'list-rule-names', // TODO: change to the name of your HTML template.\r\n          { items: items }\r\n        );\r\n      }\r\n    });\r\n  }\r\n);\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// An example of handling GET of a \"single\" resource. //////////////////////////\r\n// This handler is more complicated, because we want to show not only the //////\r\n// item requested, but also links to a set of related items. ///////////////////\r\n////////////////////////////////////////////////////////////////////////////////\r\napp.get('/chapters/:id',      // TODO: change to suit your URI design.\r\n  function(req, res) {\r\n\r\n    var item_type = 'chapter'; // TODO: change to the type of item you want.\r\n\r\n    // Get the item ID from the URI.\r\n    var item_id = req.params.id;\r\n  \r\n    // Get one item of the specified type, identified by the item ID.\r\n    db.getOne(item_type, item_id, function(err, item) {\r\n        \r\n      // If there was a database error, return an error status.\r\n      if (err) {\r\n        if (err.error == 'not_found') { res.send(404); }\r\n        else { res.send(err, 500); }\r\n      } \r\n\r\n      // Otherwise, get the related items associated with this item.\r\n      else {\r\n        \r\n        var related_type = 'rule-name'; // TODO: change to type of related item.\r\n\r\n        // Set our query to find the items related to the requested item.\r\n        req.query.party = item_id; // TODO: change `party` to reflect the\r\n                                   // relation between the item fetched above\r\n                                   // and the related items to be fetched below.\r\n\r\n        // Get items of the specified type that match the query.\r\n        db.getSome(related_type, req.query, function(err, items) {\r\n\r\n          // If there was a database error, return an error status.\r\n          if (err) { res.send(err, 500); } \r\n\r\n          // Otherwise, use the returned data to render an HTML page.\r\n          else {\r\n            res.render(\r\n            'one-chapter', // TODO: change to the name of your HTML template.\r\n              { item: item, related_items: items }\r\n            );\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n);\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// An example of handling GET of a \"single\" resource. //////////////////////////\r\n// This handler is also complicated, because we want to show not only the //////\r\n// item requested, but also a list of potential related items, so that users ///\r\n// can select from a list when updating the item. //////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////\r\napp.get('/rule-names/:id',       // TODO: change to suit your URI design.\r\n  function(req, res) {\r\n\r\n    var item_type = 'rule-name'; // TODO: change to the type of item you want.\r\n\r\n    // Get the item ID from the URI.\r\n    var item_id = req.params.id;\r\n  \r\n    // Get one item of the specified type, identified by the item ID.\r\n    db.getOne(item_type, item_id, function(err, item) {\r\n        \r\n      // If there was a database error, return an error status.\r\n      if (err) {\r\n        if (err.error == 'not_found') { res.send(404); }\r\n        else { res.send(err, 500); }\r\n      } \r\n\r\n      // Otherwise, get the items potentially related to this item.\r\n      else {\r\n        \r\n        var related_type = 'chapter'; // TODO: change to type of related item.\r\n\r\n        // Get all items of the specified related type.\r\n        db.getAll(related_type, function(err, items) {\r\n\r\n          // If there was a database error, return an error status.\r\n          if (err) { res.send(err, 500); } \r\n\r\n          // Otherwise, use the returned data to render an HTML page.\r\n          else {\r\n            res.render(\r\n              'one-rule', // TODO: change to name of your HTML template.\r\n              { item: item, related_items: items }\r\n            );\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n);\r\n\r\n\r\n// Handle GET of the \"index\" resource.\r\napp.get('/', function(req, res) { res.render('index'); });\r\n\r\n// Start listening for incoming HTTP connections.\r\napp.listen(process.env.PORT);a"]],"start1":0,"start2":0,"length1":0,"length2":10238}]],"length":10238}
